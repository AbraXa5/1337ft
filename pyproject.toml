[tool.poetry]
    name        = "1337ft"
    version     = "0.1.0"
    description = ""
    authors     = ["Abraxas <abr4xa5@proton.me>"]
    license     = "MIT"
    readme      = "README.md"
    # packages    = [{ include = "1337ft" }]

    [tool.poetry.dependencies]
        python   = "^3.10"
        requests = "^2.31.0"
        Flask    = "^2.3.2"

    [tool.poetry.group.dev.dependencies]
        black      = "^23.3.0"
        mypy       = "^1.3.0"
        isort      = { extras = ["colors"], version = "^5.12.0" }
        pre-commit = "^3.3.2"
        pytest     = "^7.3.1"
        ruff       = "^0.0.270"

[tool.poetry.scripts]
    1337ft    = "1337ft.__main__:main"
    pyupgrade = "^3.8.0"

[tool.ruff]
    # https://beta.ruff.rs/docs/rules/
    # fix = true
    src = ["1337ft", "tests"]
    target-version = "py310"
    line-length = 88 # as per black specs
    ignore-init-module-imports = true # ignore init files
    extend-exclude = ["static"]
    select = [
        "B",   # flake8-bugbear
        "C4",  # flake8-comprehensions
        "DTZ", # flake8-datetimez
        "E",   # pycodestyle errors
        "F",   # pyflakes
        "I",   # isort
        "INT", # flake8-gettext
        "PIE", # flake8-pie
        "PLC", # pylint convention
        "PLE", # pylint errors
        "PTH", # flake8-use-pathlib
        "Q",   # flake8-quotes
        "RSE", # flake8-raise
        "RUF", # ruff-specific rules
        "S",   # flake8-bandit
        "UP",  # pyupgrade
        "W",   # pycodestyle warnings
        "T10", # flake8-debugger
        "EM",  # flake8-errmsg
        "RET", # flake8-return
        # "PT",  # flake8-pytest-style
    ]
    unfixable = [
        "ERA", # do not autoremove commented out code
        "B",   # Make all bugbear error unfixable
    ]
    ignore = [
        "RUF001", # ruff-specific rules ambiguous-unicode-character-string
        "S101",   # flake8-bandit assert
        "S308",   # flake8-bandit suspicious-mark-safe-usage
        "E501",   # pycodestyle line-too-long
        "B904",   # raise-without-from-inside-except
        "B008",   # function-call-in-default-argument
        "PTH123", # open() should be replaced by Path.open()
    ]
    [tool.ruff.isort]
        force-single-line   = true
        lines-after-imports = 2

[tool.black]
    # Uncomment if pyproject.toml worked fine to ensure consistency with flake8
    # line-length = 88
    target-version = ["py38", "py39", "py310", "py311"]
    include        = '\.pyi?$'
    color          = true

    exclude = '''
    /(
        \.git
      | \.github
      | \.hg
      | \.mypy_cache
      | \.tox
      | \.venv
      | _build
      | build
      | dist
      | tests/pypi
      | tests/test_artifacts
      | pyproject.toml
    )
    '''

[tool.isort]
    profile             = "black"
    force_single_line   = true
    lines_after_imports = 2
    # skip_gitignore         = true
    include_trailing_comma = true
    # multi_line_output = 3


[tool.mypy]
    strict              = true
    files               = ["1337ft/"]
    warn_unreachable    = true
    pretty              = true
    color_output        = true
    show_column_numbers = true
    show_error_codes    = true
    show_error_context  = true

    ignore_missing_imports = true

    # check_untyped_defs          = true
    # disallow_any_generics       = true
    # disallow_incomplete_defs    = true
    # disallow_subclassing_any    = true
    # disallow_untyped_calls      = true
    # disallow_untyped_decorators = true
    # disallow_untyped_defs       = true
    # no_implicit_optional        = true
    # no_implicit_reexport        = true
    # show_error_context          = true
    # warn_redundant_casts        = true
    # warn_return_any             = true
    # warn_unused_configs         = true0
    # warn_unused_ignores         = true
    # exclude                     = []

[build-system]
    requires      = ["poetry-core"]
    build-backend = "poetry.core.masonry.api"
